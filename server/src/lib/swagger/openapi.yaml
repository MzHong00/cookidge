openapi: 3.0.3
info:
  title: Cookidge API Document
  description: >-
    해당 페이지는 Cookidge 백엔드 서버 REST API 문서 입니다.
  version: 1.0.0
servers:
  - url: https://rest-cookidge.vercel.app/api
tags:
  - name: user
    description: 사용자 정보
  - name: refrigerator
    description: 냉장고 정보
  - name: recipe
    description: 레시피 정보
paths:
  /user/me:
    get:
      tags:
        - user
      summary: 내 정보 가져오기
      description: jwt 토큰을 사용하여 나의 정보를 가져옵니다.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 인증 실패
          content:
            application/json:
              examples:
                TokenExpired:
                  summary: Token has expired
                  value:
                    message: "The access token has expired."
                InvalidToken:
                  summary: Invalid token provided
                  value:
                    message: "error message"
                MissingToken:
                  summary: Missing authorization token
                  value:
                    message: "로그인 상태가 아닙니다."
        '404':
          description: 내 정보를 찾을 수 없습니다.
        '500':
          description: 서버 내부 오류
          content:
            application/json:
              example:
                message: "내 정보를 가져오는 중 오류가 발생했습니다."
  /user/find:
    get:
      tags:
        - user
      summary: 사용자 정보 가져오기
      description: 사용자를 검색하여 데이터를 가져옵니다.
      parameters:
        - name: user_name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 응답 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: 유저를 가져오는 중 오류 발생
          content:
            application/json:
              example:
                message: "유저를 가져오는 중 오류가 발생했습니다."
  /user/search:
    get:
      tags:
        - user
      summary: 유저 검색
      description: 이름으로 유저를 검색합니다.
      parameters:
        - name: user_name
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 유저 검색 결과
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: 유저 검색 중 오류 발생
          content:
            application/json:
              example:
                message: "유저를 검색하는 중 오류가 발생했습니다."
  /user/update:
    patch:
      tags:
        - user
      summary: 사용자 정보 업데이트
      description: 사용자 정보를 수정합니다.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                introduce:
                  type: string
                picture[]:
                  type: string
                  format: binary
      responses:
        '200':
          description: 사용자 정보 수정 성공
          content:
            application/json:
              example:
                message: "사용자 정보 수정에 성공하였습니다."
        '500':
          description: 사용자 정보 수정 중 오류
          content:
            application/json:
              example:
                message: "내 정보를 업데이트하는 중 오류가 발생했습니다."
  /user/delete:
    delete:
      tags:
        - user
      summary: 사용자 계정 삭제
      description: 계정을 삭제하고 토큰을 만료 처리합니다.
      responses:
        '200':
          description: 계정 삭제 성공
          content:
            application/json:
              example:
                message: "계정이 성공적으로 삭제되었습니다."
        '500':
          description: 계정 삭제 중 오류
          content:
            application/json:
              example:
                message: "계정을 삭제하는 중 오류가 발생했습니다."
  /user/follow:
    patch:
      tags:
        - user
      summary: 팔로우 추가
      description: 다른 사용자를 팔로우합니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                follow_user_id:
                  type: string
                  required: true
      responses:
        '200':
          description: 팔로우 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: 팔로우 중 오류
          content:
            application/json:
              example:
                message: "팔로우 중 오류가 발생했습니다."
  /user/unfollow:
    patch:
      tags:
        - user
      summary: 언팔로우
      description: 다른 사용자를 언팔로우합니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                unfollow_user_id:
                  type: string
                  required: true
      responses:
        '200':
          description: 언팔로우 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: 언팔로우 중 오류
          content:
            application/json:
              example:
                message: "언팔로우 중 오류가 발생했습니다."
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: abcd1373a062c4f5e4201234
        name:
          type: string
          example: theUser
        email:
          type: string
          example: abcd@email.com
        picture:
          type: string
          description: clodinary id 또는 이미지 링크
          example: "https://www.example.com/image1.jpg"
        plan:
          type: string
          example: normal
          enum:
            - normal
            - premium
        follower:
          type: array
          items:
            type: string
            example: ["abcd1373a062c4f5e4201234", "efgh1373a062c4f5e4205678"]
        following:
          type: array
          items:
            type: string
            example: ["abcd1373a062c4f5e4201234", "efgh1373a062c4f5e4205678"]
        create_at:
          type: string
          format: date-time
          example: "2024-10-30T12:00:00Z"
    Refrigerator:
      type: object
      properties:
        name:
          type: string
          example: 우리집 냉장고
        owner_id:
          type: string
          example: abcd1373a062c4f5e4201234
        stored_ingredients:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: 당근
              category:
                type: string
                example: 채소
              quantity:
                type: string
                example: "2kg"
              expired_at:
                type: string
                format: date-time
                example: 2024-11-15T00:00:00Z
        last_updated:
          type: string
          format: date-time
          example: 2024-10-30T12:45:00Z
        created_at:
          type: string
          format: date-time
          example: 2024-10-01T08:30:00Z
    Recipe:
      type: object
      properties:
        name:
          type: string
          example: 김치 볶음밥
        picture:
          type: array
          items:
            type: string
          example: ["https://www.example.com/image1.jpg", "https://www.example.com/image2.jpg"]
        author_id:
          type: string
          example: abcd1373a062c4f5e4201234
        ingredients:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: 토마토
              category:
                type: string
                example: 채소
              quantity:
                type: string
                example: "1개"
        introduction:
          type: string
          example: "집에서 간단히 만들 수 있는 김치볶음밥입니다."
        servings:
          type: integer
          example: 4
        cooking_time:
          type: integer
          example: 30
        cooking_steps:
          type: array
          items:
            type: object
            properties:
              picture:
                type: string
                example: "https://www.example.com/step1.jpg"
              instruction:
                type: string
                example: "김치를 잘게 자르고 파를 기름에 두른다"
        like_members:
          type: array
          items:
            type: string
          example: ["abcd1373a062c4f5e4201234", "efgb1373a062c4f5e4201234"]
        ratting:
          type: number
          format: float
          example: 4.5
        created_at:
          type: string
          format: date-time
          example: "2024-10-30T12:00:00Z"
    Comment:
      type: object
      properties:
        recipe_id:
          type: string
          example: "recipe123"
        user_id:
          type: string
          example: "abcd1373a062c4f5e4201234"
        comment:
          type: string
          example: "집에서 만들기 굉장히 간편해요!"
        created_at:
          type: string
          format: date-time
          example: "2024-10-30T12:30:00Z"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
